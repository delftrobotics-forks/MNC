name: "ZF"

input: "data"
input_shape {
  dim: 1
  dim: 3
  dim: 224
  dim: 224
}

input: "im_info"
input_shape {
  dim: 1
  dim: 3
}

# ------------ Convolution -----------
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param { lr_mult: 1.0 }
  param { lr_mult: 2.0 }
  convolution_param {
    num_output: 96
    kernel_size: 7
    pad: 3
    stride: 2
  }
}

layer {
  name: "relu1"
  type: "ReLU"
  bottom: "conv1"
  top: "conv1"
}

layer {
  name: "norm1"
  type: "LRN"
  bottom: "conv1"
  top: "norm1"
  lrn_param {
    local_size: 3
    alpha: 0.00005
    beta: 0.75
    norm_region: WITHIN_CHANNEL
    engine: CAFFE
  }
}

layer {
  name: "pool1"
  type: "Pooling"
  bottom: "norm1"
  top: "pool1"
  pooling_param {
    kernel_size: 3
    stride: 2
    pad: 1
    pool: MAX
  }
}

layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param { lr_mult: 1.0 }
  param { lr_mult: 2.0 }
  convolution_param {
    num_output: 256
    kernel_size: 5
    pad: 2
    stride: 2
  }
}

layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2"
}

layer {
  name: "norm2"
  type: "LRN"
  bottom: "conv2"
  top: "norm2"
  lrn_param {
    local_size: 3
    alpha: 0.00005
    beta: 0.75
    norm_region: WITHIN_CHANNEL
    engine: CAFFE
  }
}

layer {
  name: "pool2"
  type: "Pooling"
  bottom: "norm2"
  top: "pool2"
  pooling_param {
    kernel_size: 3
    stride: 2
    pad: 1
    pool: MAX
  }
}

layer {
  name: "conv3"
  type: "Convolution"
  bottom: "pool2"
  top: "conv3"
  param { lr_mult: 1.0 }
  param { lr_mult: 2.0 }
  convolution_param {
    num_output: 384
    kernel_size: 3
    pad: 1
    stride: 1
  }
}

layer {
  name: "relu3"
  type: "ReLU"
  bottom: "conv3"
  top: "conv3"
}

layer {
  name: "conv4"
  type: "Convolution"
  bottom: "conv3"
  top: "conv4"
  param { lr_mult: 1.0 }
  param { lr_mult: 2.0 }
  convolution_param {
    num_output: 384
    kernel_size: 3
    pad: 1
    stride: 1
  }
}

layer {
  name: "relu4"
  type: "ReLU"
  bottom: "conv4"
  top: "conv4"
}

layer {
  name: "conv5"
  type: "Convolution"
  bottom: "conv4"
  top: "conv5"
  param { lr_mult: 1.0 }
  param { lr_mult: 2.0 }
  convolution_param {
    num_output: 256
    kernel_size: 3
    pad: 1
    stride: 1
  }
}

layer {
  name: "relu5"
  type: "ReLU"
  bottom: "conv5"
  top: "conv5"
}


#------------ RPN ------------

layer {
  name: "rpn_conv_3x3"
  type: "Convolution"
  bottom: "conv5"
  top: "rpn_output"
  param { lr_mult: 1.0 decay_mult: 1.0 }
  param { lr_mult: 2.0 decay_mult: 0 }
  convolution_param {
    num_output: 512
    kernel_size: 3 pad: 1 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}

layer {
  name: "rpn_relu_3x3"
  type: "ReLU"
  bottom: "rpn_output"
  top: "rpn_output"
}

layer {
  name: "rpn_cls_score"
  type: "Convolution"
  bottom: "rpn_output"
  top: "rpn_cls_score"
  param { lr_mult: 1.0 decay_mult: 1.0 }
  param { lr_mult: 2.0 decay_mult: 0 }
  convolution_param {
    num_output: 18   # 2(bg/fg) * 9(anchors)
    kernel_size: 1 pad: 0 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}

layer {
  name: "rpn_bbox_pred"
  type: "Convolution"
  bottom: "rpn_output"
  top: "rpn_bbox_pred"
  param { lr_mult: 1.0 decay_mult: 1.0 }
  param { lr_mult: 2.0 decay_mult: 0 }
  convolution_param {
    num_output: 36   # 4 * 9(anchors)
    kernel_size: 1 pad: 0 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}

layer {
   bottom: "rpn_cls_score"
   top: "rpn_cls_score_reshape"
   name: "rpn_cls_score_reshape"
   type: "Reshape"
   reshape_param { shape { dim: 0 dim: 2 dim: -1 dim: 0 } }
}

#------------ Anchor to Proposal ------------

layer {
  name: "rpn_cls_prob"
  type: "Softmax"
  bottom: "rpn_cls_score_reshape"
  top: "rpn_cls_prob"
}

layer {
  name: 'rpn_cls_prob_reshape'
  type: 'Reshape'
  bottom: 'rpn_cls_prob'
  top: 'rpn_cls_prob_reshape'
  reshape_param { shape { dim: 0 dim: 18 dim: -1 dim: 0 } }
}

layer {
  name: 'proposal'
  type: 'Python'
  bottom: 'rpn_cls_prob_reshape'
  bottom: 'rpn_bbox_pred'
  bottom: 'im_info'
  top: 'rois'
  top: 'rpn_scores'
  python_param {
    module: 'multitask_network_cascades.pylayer.proposal_layer'
    layer: 'ProposalLayer'
    param_str: "{'feat_stride': 16, 'gradient_scale': 1}"
  }
}

layer {
  name: 'silence'
  type: 'Silence'
  bottom: 'rpn_scores'
}


#------------ Roi Warping ------------

layer {
  name: "roi_interpolate_conv5"
  type: "Module"
  bottom: "conv5"
  bottom: "rois"
  top: "roi_interpolate_conv5"
  module_param {
    module: "mnc"
    type: "ROIWarping"
    param_str: "{ 'pooled_w': 12, 'pooled_h': 12, 'spatial_scale': 0.0625 }"
  }
}

#------------ Mask Estimation ------------

layer {
  name: "fc6_maskest"
  type: "InnerProduct"
  bottom: "roi_interpolate_conv5"
  top: "fc6_maskest"
  param { name: "fc6_maskest_w"}
  param { name: "fc6_maskest_b"}
  inner_product_param {
    num_output: 256
  }
}

layer {
  name: "relu6_maskest"
  type: "ReLU"
  bottom: "fc6_maskest"
  top: "fc6_maskest"
}

layer {
  name: "mask_pred"
  type: "InnerProduct"
  bottom: "fc6_maskest"
  top: "mask_pred"
  param { name: "mask_pred_w" }
  param { name: "mask_pred_b" }
  inner_product_param {
    num_output: 441 # 21*21
  }
}

layer {
  name: "mask_output"
  type: "Sigmoid"
  bottom: "mask_pred"
  top: "mask_output"
}

layer {
  name: "mask_proposal"
  type: 'Python'
  bottom: 'mask_output'
  top: 'mask_proposal'
  python_param {
    module: 'multitask_network_cascades.pylayer.mask_layer'
    layer: 'MaskLayer'
  }
}

layer {
  name: "mask_resize"
  type: "Module"
  bottom: "mask_proposal"
  top: "mask_proposal_resize"
  module_param {
    module: "mnc"
    type: "MaskResize"
    param_str: "{ 'output_width': 12, 'output_height': 12 }"
  }
}

#------------ Box Features ------------

layer {
  name: "roi_interpolate_conv5_box"
  type: "Pooling"
  bottom: "roi_interpolate_conv5"
  top: "roi_interpolate_conv5_box"
  pooling_param {
    kernel_size: 2
    stride: 2
    pad: 0
    pool: MAX
  }
}

layer {
  name: "fc6"
  type: "InnerProduct"
  bottom: "roi_interpolate_conv5_box"
  top: "fc6"
  param {
    name: "fc6_w" 
  }
  param {
    name: "fc6_b" 
  }
  inner_product_param {
    num_output: 4096
  }
}

layer {
  name: "relu6"
  type: "ReLU"
  bottom: "fc6"
  top: "fc6"
}

layer {
  name: "fc7"
  type: "InnerProduct"
  bottom: "fc6"
  top: "fc7"
  param {
    name: "fc7_w" 
  }
  param {
    name: "fc7_b"
  }
  inner_product_param {
    num_output: 4096
  }
}

layer {
  name: "relu7"
  type: "ReLU"
  bottom: "fc7"
  top: "fc7"
}

#------------ Mask Features ------------

layer {
  name: "mask_pooling"
  type: "Module"
  bottom: "roi_interpolate_conv5"
  bottom: "mask_proposal_resize"
  top: "roi_mask_conv5"
  module_param {
    module: "mnc"
    type: "MaskPooling"
  }
}

layer {
  name: "roi_interpolate_conv5_mask"
  type: "Pooling"
  bottom: "roi_mask_conv5"
  top: "roi_interpolate_conv5_mask"
  pooling_param {
    kernel_size: 2
    stride: 2
    pad: 0
    pool: MAX
  }
}

layer {
  name: "fc6_mask"
  type: "InnerProduct"
  bottom: "roi_interpolate_conv5_mask"
  top: "fc6_mask"
  param {
    name: "fc6_mask_w" 
  }
  param {
    name: "fc6_mask_b" 
  }
  inner_product_param {
    num_output: 4096
  }
}

layer {
  name: "relu6_mask"
  type: "ReLU"
  bottom: "fc6_mask"
  top: "fc6_mask"
}

layer {
  name: "fc7_mask"
  type: "InnerProduct"
  bottom: "fc6_mask"
  top: "fc7_mask"
  param {
    name: "fc7_mask_w" 
  }
  param {
    name: "fc7_mask_b" 
  }
  inner_product_param {
    num_output: 4096
  }
}

layer {
  name: "relu7_mask"
  type: "ReLU"
  bottom: "fc7_mask"
  top: "fc7_mask"
}

#----- Concat Box-Mask Feature -----

layer {
  name: "join_box_mask"
  type: "Concat"
  bottom: "fc7_mask"
  bottom: "fc7"
  top: "join_box_mask"
  concat_param {
    axis: 1
  }
}

#----- Box-level Classification -----

layer {
  name: "cls_score"
  type: "InnerProduct"
  bottom: "join_box_mask"
  top: "cls_score"
  param {
    name: "cls_score_w" 
  }
  param {
    name: "cls_score_b" 
  }
  inner_product_param {
    num_output: 2
  }
}

layer {
  name: "cls_prob"
  type: "Softmax"
  bottom: "cls_score"
  top: "cls_prob"
  loss_param {
    ignore_label: -1
    normalize: true
  }
}

#----- Mask-level Classification -----

layer {
  name: "seg_cls_score"
  type: "InnerProduct"
  bottom: "join_box_mask"
  top: "seg_cls_score"
  param {
    name: "seg_cls_score_w" 
  }
  param {
    name: "seg_cls_score_b" 
  }
  inner_product_param {
    num_output: 2
  }
}

layer {
  name: "seg_cls_prob"
  type: "Softmax"
  bottom: "seg_cls_score"
  top: "seg_cls_prob"
  loss_param {
    ignore_label: -1
    normalize: true
  }
}

#----- Bounding-box Regression -----

layer {
  name: "bbox_pred"
  type: "InnerProduct"
  bottom: "join_box_mask"
  top: "bbox_pred"
  param {
    name: "bbox_pred_w" 
  }
  param {
    name: "bbox_pred_b" 
  }
  inner_product_param {
    num_output: 8
  }
}


# --------- Next Stage ----------
# We extend 3 stage mnc to 5 stage
# layer structure are mostly similar
# name are suffixed by _ext (extend)

layer {
  name: "stage_bridge"
  type: 'Python'
  bottom: 'rois'
  bottom: 'bbox_pred'
  bottom: 'seg_cls_prob'
  bottom: 'im_info'
  top: 'rois_ext'
  python_param {
    module: 'multitask_network_cascades.pylayer.stage_bridge_layer'
    layer: 'StageBridgeLayer'
  }
}

#------------ Roi Warping Ext ------------

layer {
  name: "roi_interpolate_conv5_ext"
  type: "Module"
  bottom: "conv5"
  bottom: "rois_ext"
  top: "roi_interpolate_conv5_ext"
  module_param {
    module: "mnc"
    type: "ROIWarping"
    param_str: "{ 'pooled_w': 12, 'pooled_h': 12, 'spatial_scale': 0.0625 }"
  }
}

#------------ Mask Estimation Ext ------------

layer {
  name: "fc6_maskest_ext"
  type: "InnerProduct"
  bottom: "roi_interpolate_conv5_ext"
  top: "fc6_maskest_ext"
  param {
    name: "fc6_maskest_w" 
  }
  param {
    name: "fc6_maskest_b" 
  }
  inner_product_param {
    num_output: 256
  }
}

layer {
  name: "relu6_maskest_ext"
  type: "ReLU"
  bottom: "fc6_maskest_ext"
  top: "fc6_maskest_ext"
}

layer {
  name: "mask_pred_ext"
  type: "InnerProduct"
  bottom: "fc6_maskest_ext"
  top: "mask_pred_ext"
  param {
    name: "mask_pred_w" 
  }
  param {
    name: "mask_pred_b" 
  }
  inner_product_param {
    num_output: 441 # 21*21
  }
}

#------------ Mask Resize ------------
# get masks from sigmoid prediction 
# and use it for mask pooling

layer {
  name: "mask_output_ext"
  type: "Sigmoid"
  bottom: "mask_pred_ext"
  top: "mask_output_ext"
}

layer {
  name: "mask_proposal_ext"
  type: 'Python'
  bottom: 'mask_output_ext'
  top: 'mask_proposal_ext'
  python_param {
    module: 'multitask_network_cascades.pylayer.mask_layer'
    layer: 'MaskLayer'
  }
}

layer {
  name: "mask_resize_ext"
  type: "Module"
  bottom: "mask_proposal_ext"
  top: "mask_proposal_resize_ext"
  module_param {
    module: "mnc"
    type: "MaskResize"
    param_str: "{ 'output_width': 12, 'output_height': 12 }"
  }
}

#------------ Box Features Ext ------------

layer {
  name: "roi_interpolate_conv5_box_ext"
  type: "Pooling"
  bottom: "roi_interpolate_conv5_ext"
  top: "roi_interpolate_conv5_box_ext"
  pooling_param {
    kernel_size: 2
    stride: 2
    pad: 0
    pool: MAX
  }
}

layer {
  name: "fc6_ext"
  type: "InnerProduct"
  bottom: "roi_interpolate_conv5_box_ext"
  top: "fc6_ext"
  param {
    name: "fc6_w" 
  }
  param {
    name: "fc6_b" 
  }
  inner_product_param {
    num_output: 4096
  }
}

layer {
  name: "relu6_ext"
  type: "ReLU"
  bottom: "fc6_ext"
  top: "fc6_ext"
}

layer {
  name: "fc7_ext"
  type: "InnerProduct"
  bottom: "fc6_ext"
  top: "fc7_ext"
  param {
    name: "fc7_w" 
  }
  param {
    name: "fc7_b" 
  }
  inner_product_param {
    num_output: 4096
  }
}

layer {
  name: "relu7_ext"
  type: "ReLU"
  bottom: "fc7_ext"
  top: "fc7_ext"
}

# ------ Mask Feature Ext ---------

layer {
  name: "mask_pooling_ext"
  type: "Module"
  bottom: "roi_interpolate_conv5_ext"
  bottom: "mask_proposal_resize_ext"
  top: "roi_mask_conv5_ext"
  module_param {
    module: "mnc"
    type: "MaskPooling"
  }
}

layer {
  name: "roi_interpolate_conv5_mask_ext"
  type: "Pooling"
  bottom: "roi_mask_conv5_ext"
  top: "roi_interpolate_conv5_mask_ext"
  pooling_param {
    kernel_size: 2
    stride: 2
    pad: 0
    pool: MAX
  }
}

layer {
  name: "fc6_mask_ext"
  type: "InnerProduct"
  bottom: "roi_interpolate_conv5_mask_ext"
  top: "fc6_mask_ext"
  param {
    name: "fc6_mask_w" 
  }
  param {
    name: "fc6_mask_b" 
  }
  inner_product_param {
    num_output: 4096
  }
}

layer {
  name: "relu6_mask_ext"
  type: "ReLU"
  bottom: "fc6_mask_ext"
  top: "fc6_mask_ext"
}

layer {
  name: "fc7_mask_ext"
  type: "InnerProduct"
  bottom: "fc6_mask_ext"
  top: "fc7_mask_ext"
  param {
    name: "fc7_mask_w" 
  }
  param {
    name: "fc7_mask_b" 
  }
  inner_product_param {
    num_output: 4096
  }
}

layer {
  name: "relu7_mask_ext"
  type: "ReLU"
  bottom: "fc7_mask_ext"
  top: "fc7_mask_ext"
}

#----- Concat Box-Mask Feature -----

layer {
  name: "join_box_mask_ext"
  type: "Concat"
  bottom: "fc7_mask_ext"
  bottom: "fc7_ext"
  top: "join_box_mask_ext"
  concat_param {
    axis: 1
  }
}

#----- Box-level Classification -----

layer {
  name: "cls_score_ext"
  type: "InnerProduct"
  bottom: "join_box_mask_ext"
  top: "cls_score_ext"
  param {
    name: "cls_score_w" 
  }
  param {
    name: "cls_score_b" 
  }
  inner_product_param {
    num_output: 2
  }
}

layer {
  name: "cls_prob_ext"
  type: "Softmax"
  bottom: "cls_score_ext"
  top: "cls_prob_ext"
  loss_param {
    ignore_label: -1
    normalize: true
  }
}

#----- Mask-level Classification -----

layer {
  name: "seg_cls_score_ext"
  type: "InnerProduct"
  bottom: "join_box_mask_ext"
  top: "seg_cls_score_ext"
  param { name: "seg_cls_score_w" }
  param { name: "seg_cls_score_b" }
  inner_product_param {
    num_output: 2
  }
}

layer {
  name: "seg_cls_prob_ext"
  type: "Softmax"
  bottom: "seg_cls_score_ext"
  top: "seg_cls_prob_ext"
  loss_param {
    ignore_label: -1
    normalize: true
  }
}

